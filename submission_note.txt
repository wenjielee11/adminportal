1. Why did you choose the tools, libraries, and language you used for the coding exercise?
I felt like using take home assignments as an excuse to exploring new libraries and tools. I decided to challenge myself and get more practice with spring boot over the few days as a result. Although spring isnt a "modern" library, I really enjoy the extensive library and features being offered,
I particularly liked JPA's query injection that implicitly translates JPAQuery to SQL. It was a really enjoyable experience poking around and experimenting what it could do.

Although I am still inexperienced, I could see that spring boot's library offers a wide range of configurations. On a much larger scale, spring boot could be more
scalable since it allows very niche configurations. 

Although tempting to use "bun run dev" to make a easy out of the box setup with javascript frameworks, I wanted to get some practice with running docker on spring boot and java applications.
In the process I learnt alot, such as using maven to produce a .jar file for my dockerfile. 

Many companies out there are still using spring (i.e. Amazon), so I am looking to add such valuable skills to my arsenal. I also learn very well under short deadlines, so this was a good experience for me.

2. What are the advantages and disadvantages of your solution?

I enjoyed exploring a concept that my database class I am currently taking glanced over: soft deletes. Using a bit to mark a deletion causes problems, it may cause constraint violations as another duplicate entry could be added, and later deleted again, causing two of the
same to be deleted. Flushing them into another table was an easy solution, so I decided to define the entity and the table around having them all in the same one. I eventually decided that marking each user as deleted with a timestamp was the easiest since it made them unique. 

Using Java ensures robust and reliable code, since it is a strongly typed language and has compiler errors. This decreases the likelihood of run time errors.
Spring boot offers dependency injections and ease of integration with other dependencies. Java also allows multi threading, is cross platform compatible, causing it to be highly scalable.
Although I did not have time, the testing modules that spring boot offers are great, especially dependency injections. It allows high control over the outcome of my code.
Spring boot also offers security modules for authentication and authorization. 

Since Java is verbose, it is much slower to develop a webapp, unlike javascript that is interpreted. Java also lacks front-end features that many modern JS frameworks use, such as React and Vue. Spring
is not a great tool for light-weight data-intensive enterprise application development, since it is much slower compares to node and express. It also requires more code written due to its verbosity. So projects could 
get needlessly large for a lightweight application. Unlike express and nextjs, it is unable to directly host and serve React applications as well, so its more tooling and devops needed to deploy seperate services. 

But docker solves this with "docker compose up!" 
